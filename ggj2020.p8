pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
--main


--Screen from 0 to 127
--Data   from 1 to 128

function makePoint(x, y, col)
   b = 0
   if col == 3 then b = 1 end
   return {
	  x = x,
	  y = y,
	  s = 1,
	  c = col,
     b = b
   }
end

function destroyPoint(x,y)
   for p in all(data) do
     local dist = sqrt((p.x - x)^2 + (p.y - y)^2)
	  if dist < rnd(5)+5 and p.s == 1 then
		 p.s = 0
       add(brokenData, p)
       createParticle(p.x, p.y, p.c)
       updateHp()
	  end
   end

   for b in all(bots) do
      b.wait = false
   end

   shake.t = 21
end

function recreateEveryPoint()
   for p in all(data) do	
		p.s = 1
	end
end

function createParticle(x, y, c)
   add(particles, {x = x, y = y, c = c, sx = rnd(5)+1, sy = rnd(2)-1})
end

function createBoosterParticle(x, y, c)
   add(particles, {x = x, y = y, c = c, sx = rnd(5)+1, sy = rnd(2)-1})
end

function updateHp()
   sum = 0
   for bP in all(brokenData) do
      --decrease hp bar relative to color destroyed
      if     bP.c == 13 then sum += 2
      elseif bP.c == 2 then sum += 2
      elseif bP.c == 7 then sum += 1
      elseif bP.c == 6 then sum += 2
      elseif bP.c == 8 then sum += 13
      elseif bP.c == 9 then sum += 7
      end
   end
   hp = maxhp - sum
end


function getStruct()
   cls()
   spr(3, 16, 0, 16, 16)
   struct = {}
   for j=0,127 do
	  for i=0,127 do
       pt = pget(i,j)
		 if pt!=0 then
			add(struct, makePoint(i, j, pt))
		 end
	  end
   end
   cls()
   return struct
end

function getBotSpawn()
   bS = {}
   for p in all(data) do 
      if p.b == 1 then
         add(bS, p)
      end
   end
   return bS
end

function drawPoint(p)
   if p.s==1 then
	   pset(p.x, p.y, p.c)
   end
end

function drawBrokenPoint(p)
   if p.s==0 then
	   pset(p.x, p.y, 0)
   end
end

function drawStruct()
   foreach(data, drawPoint)
end

function drawBrokenStruct()
   foreach(brokenData, drawBrokenPoint)
end

function drawBotSpawn()
   foreach(botSpawn, drawPoint)
end

function drawParticles()
   for p in all(particles) do
      pset(p.x, p.y, p.c)
   end
end

function animateParticles()
   for p in all(particles) do
      p.x -= p.sx
      p.y += p.sy

      if (p.x < 0) then
         del(particles, p)
      end
   end
end


function createStars()
   s = {}
   for i = 0,25 do
      add(s, {x = rnd(127), y = rnd(127), l = flr(rnd(3))})
   end
   return s
end

function drawStars()
   for s in all(stars) do
      pset(s.x, s.y, 7)
   end
end

function animateStars()
   for s in all(stars) do
      if (s.l == 0) then s.x -= 1
      elseif (s.l == 1) then s.x -= 2
      elseif (s.l == 2) then s.x -= 4 end

      if (s.x < 0) then
         s.x = 129
         s.l = flr(rnd(3))
      end
   end
end

function drawBoosters()
   if t % 4 == 0 then
      spr(65, 16, 32, 2, 2)
      spr(65, 16, 80, 2, 2)
   end
end

function createBoosterParticles()
   --if t % 1 == 0 then
      createBoosterParticle(16, 40, 9)
      createBoosterParticle(16, 88, 9)
   --end
end

function screenShake()
   if shake.t > 0 then
      if shake.t % 3 == 0 then
         shake.x += rnd(3) - 1.5
         shake.y += rnd(3) - 1.5
      else
         shake.x = 0
         shake.y = 0
      end
      shake.t -= 1
   end
end


function createBots()
   if #bots < 20 then
      add(bots, {x = 51, y = 63, s = rnd(0.5) + 1, t = nil, wait = false})
      add(bots, {x = 51, y = 64, s = rnd(0.5) + 1, t = nil, wait = false})
      add(bots, {x = 51, y = 65, s = rnd(0.5) + 1, t = nil, wait = false})
   end
end

function searchTarget(b)
   pivot = flr(rnd(#brokenData))
   for i=pivot + 1 ,#brokenData do
      if brokenData[i].s == 0 and brokenData[i].c == botCol then
         brokenData[i].s = 2
         return { x = brokenData[i].x, y = brokenData[i].y }
      end
   end
   for i=1,pivot do
      if brokenData[i].s == 0 and brokenData[i].c == botCol then
         brokenData[i].s = 2
         return { x = brokenData[i].x, y = brokenData[i].y }
      end
   end
   
   b.wait = true
   del(bots, b)
   return nil
end


function moveBots()
   for b in all(bots) do
      if b.t == nil and not b.wait then
         b.t = searchTarget(b)
      end
      

      if (b.t != nil) then
         if b.x < b.t.x then b.x += b.s
         elseif b.x > b.t.x then b.x -= b.s end
         if b.y < b.t.y then b.y += b.s
         elseif b.y > b.t.y then b.y -= b.s end

         dist = sqrt((b.x - b.t.x)^2 + (b.y - b.t.y)^2)
         if (dist < 2) then
            for p in all(brokenData) do
               if (b.t.x == p.x and b.t.y == p.y) do
                  for f in all(fires) do
                     if f.x == p.x and f.y == p.y then
                        del(fires, f)
                     end
                  end
                  del(brokenData, p)
                  for sP in all(botSpawn) do
                     if (b.t.x == sP.x and b.t.y == sP.y) do
                        sP.s = 1
                     end
                  end
                  del(bots, b)

                  updateHp()
               end
            end
         end
      end
   end
end


function createFire()
   source = {x = flr(rnd(128)), y = flr(rnd(128)), growth = 0}
   add(fires, source)
   for p in all(data) do
      if p.x == source.x and p.y == source.y and p.c == 7 then
         p.s = 0
         add(brokenData, p)
      end
   end
end

function updateFires()
   if #fires > 0 then
      for k=1,#fires do
         fire = flr(rnd(#fires)) + 1
         fires[k].growth += 0.01
         for i=0,15 do
            point = flr(rnd(5207)) + 1
            dist = sqrt((data[point].x - fires[k].x)^2 + (data[point].y - fires[k].y)^2)
            if dist < rnd(1)+fires[k].growth and data[point].s == 1 and data[point].c == 7 and data[point].s == 1 then
               data[point].s = 0
               add(brokenData, data[point])
               createParticle(data[point].x, data[point].y, 8)
               updateHp()
            end
         end
      end
   end
end


function selfDestruct()
   sdspeed += 50

   for i=0,sdspeed do
      point = flr(rnd(5207)) + 1

      if (data[point].s != 0) and not gameover then
         data[point].s = 0
         if sdspeed < 250 then
            createParticle(data[point].x, data[point].y, 8)
         elseif sdspeed > 2000 then
            gameover = true
         end
      end
   end
end


function createLaserone()
   laserone = {y = my, g = 0}
end

function drawLaserone()
   line(0, laserone.y, laserone.g, laserone.y, 11)
   line(0, laserone.y + 1, laserone.g, laserone.y + 1, 11)
end

function updateLaserone()
   laserone.g += 2

   for p in all(data) do
      if (p.x == laserone.g + 2 and p.y == laserone.y + flr(rnd(2)) - 1) then
         p.s = 0
         createParticle(p.x, p.y, p.c)
      end
   end

   if laserone.g > 128 then
      laserone = nil
   end
end


function cycleBots()
   if botCol != 15 then
      botCol += 1
   else
      botCol = 0
   end
   for p in all(brokenData) do
      if p.b == 1 then
         p.c = botCol
      end
   end
   for p in all(botSpawn) do
      p.c = botCol
   end
end


function drawHpBar()
   rectfill(0, 0, (hp/maxhp)*128, 4, 13)
   print(hp .. "/" .. maxhp, 49, 0, 7)
end


function createAsteroid()
   local ast = { x = 140, y = flr(rnd(128)), t = {x = flr(rnd(128)), y = flr(rnd(128))}, s = rnd(1) + 1 }
   local hit = false
   for p in all(data) do
      if p.x == ast.t.x and p.y == ast.t.y then
         hit = true
      end
   end
   if not hit then
      ast.t.x = -50
   end

   add(asteroids, ast)
   
end

function drawAsteroid()
   for a in all(asteroids) do
      --circfill(a.x+1, a.y+1, 3, 10)
      circfill(a.x, a.y, 3, 5)
   end
end

function updateAsteroid()
   for a in all(asteroids) do
      if a.x <= -10 or a.y > 138 then
         del(asteroids, a)
      else
         local angle = atan2(a.t.x - a.x, a.t.y - a.y)
         a.x = a.x + a.s * cos(angle)
         a.y = a.y + a.s * sin(angle)
      
         dist = abs(a.x - a.t.x) + abs(a.y - a.t.y)
         if dist < 2 then
            destroyPoint(a.t.x, a.t.y)
            del(asteroids, a)
            break
         end
      end
   end
end

function drawGameOver()
   if gameover then
      rectfill(64-goan, 60, 64+goan, 65, 8)
      goan += 5
      if t % 8 != 0 then
         print("GAME OVER", 45, 60, 0)
      end
   end
end

--------------------------------




function _init()
	data = getStruct()
   brokenData = {}
   botSpawn = getBotSpawn()
	t = 0
	pset(127,0,8)

   particles = {}
   stars = createStars()

   shake = { x = 0, y = 0, t = 0}

   bots = {}

   fires = {}

   sdspeed = 1
   selfdestruct = false

   laserone = nil

   botCol = 3

   maxhp = 1500
   hp = maxhp

   asteroids = {}

   gameover = false
   goan = 0
end




function _update60()
   camera(0 + shake.x, 0 + shake.y)
   screenShake()

   t += 1

   animateParticles()
   animateStars()

   if not selfdestruct then
      createBoosterParticles()
   end

   moveBots()

   updateFires()

   if btnp(4) then
      createBots()
   elseif btnp(5) then
      cycleBots()
   end
   if selfdestruct and sdspeed < 2500 then selfDestruct() end

   if (btnp(0)) then
      createLaserone()
   end
   if laserone != nil then
      updateLaserone()
   end

   if  t % 150 == 0 and not selfdestruct then
      createAsteroid()
   end 

   if t % 800 == 0 and not selfdestruct then
      createFire()
   end

   updateAsteroid()

   if hp <= 0 then
      selfdestruct = true
   end
end





function _draw()
   --if (not btn(5)) then
   cls()
   --end
   drawStars()

   if not selfdestruct then
      spr(3, 16, 0, 16, 16)
   end

   if (selfdestruct) then
      drawStruct()
   else
      drawBotSpawn()
      drawBrokenStruct()
      drawBoosters()
   end

   drawParticles()

   for b in all(bots) do
      pset(b.x, b.y, 11)
   end

   if (laserone != nil) then
      drawLaserone()
   end

   if (not selfdestruct) then
      drawHpBar()
   end

   drawAsteroid()

   drawGameOver()
end




--cose


-->8
--pathfinding




function findPath(start, goal)
   wallCol = 2

   --initialize data with current point
   frontier = {}
   insert(frontier, start, 0)
   came_from = {}
   came_from[vectoindex(start)] = nil
   cost_so_far = {}
   cost_so_far[vectoindex(start)] = 0

   --Cycle until i have frontiers unexplored
   while (#frontier > 0 and #frontier < 1000) do
	  --Take the current frontier tile
	  current = popEnd(frontier)

	  --If I have reach my goal we can break
	  if (vectoindex(current) == vectoindex(goal)) break 

	  --Get cycle through all the neighbours
	  local neighbours = getNeighbours(current)
	  for next in all(neighbours) do
		 local nextIndex = vectoindex(next)
		 local new_cost = cost_so_far[vectoindex(current)] + 1

		 --If I have not explored this tile or if I found a better route to an existing one
		 if (cost_so_far[nextIndex] == nil) or (new_cost < cost_so_far[nextIndex]) then
			--Set this tile as a new frontier and save its cost
			cost_so_far[nextIndex] = new_cost
			local priority = new_cost + heuristic(goal, next)
			insert(frontier, next, priority)
			
			--Save from where I came
			came_from[nextIndex] = current
			
			--if (nextIndex != vectoindex(start)) and (nextIndex != vectoindex(goal)) then
			--   mset(next[1],next[2],19)
			--end
		 end 
	  end
   end

   --Recreate the path from the goal
   current = came_from[vectoindex(goal)]
   path = {}
   local cindex = vectoindex(current)
   local sindex = vectoindex(start)
   while cindex != sindex do
	  add(path, current)
	  current = came_from[cindex]
	  cindex = vectoindex(current)
   end
   reverse(path)

   return path
   --for point in all(path) do
   --	  mset(point[1],point[2],18)
   --end

end









-- manhattan distance on a square grid
function heuristic(a, b)
   return abs(a[1] - b[1]) + abs(a[2] - b[2])
end

-- find all existing neighbours of a position that are not walls
debugCounter = 0
function getNeighbours(pos)
   local neighbours={}
   local x = pos[1]
   local y = pos[2]



   if x>0 and x<128 and y>0 and y<128 then
	  for p in all(data) do
		 if p.c!=2 then
			if     (p.x==x-1 and p.y==y) then add(neighbours, {x-1,y})
		    elseif (p.x==x+1 and p.y==y) then add(neighbours, {x+1,y})
            elseif (p.x==x and p.y==y+1) then add(neighbours, {x,y+1})
            elseif (p.x==x and p.y==y-1) then add(neighbours, {x,y-1})
			end
		 end
	  end
   end
   debugCounter += 1
   printh(pos[1] .. "," .. pos[2] .. " dc:" .. debugCounter)

   -- for making diagonals
   --if (x+y) % 2 == 0 then
   --	  reverse(neighbours)
   --end
   return neighbours
end

-- insert into start of table
function insert(t, val)
   for i=(#t+1),2,-1 do
	  t[i] = t[i-1]
   end
   t[1] = val
end

-- insert into table and sort by priority
function insert(t, val, p)
   if #t >= 1 then
	  add(t, {})
	  for i=(#t),2,-1 do
		 
		 local next = t[i-1]
		 if p < next[2] then
			t[i] = {val, p}
			return
		 else
			t[i] = next
		 end
	  end
	  t[1] = {val, p}
   else
	  add(t, {val, p}) 
   end
end

-- pop the last element off a table
function popEnd(t)
   local top = t[#t]
   del(t,t[#t])
   return top[1]
end

function reverse(t)
   for i=1,(#t/2) do
	  local temp = t[i]
	  local oppindex = #t-(i-1)
	  t[i] = t[oppindex]
	  t[oppindex] = temp
   end
end

-- translate a 2d x,y coordinate to a 1d index and back again
function vectoindex(vec)
   return maptoindex(vec[1],vec[2])
end
function maptoindex(x, y)
   return ((x+1) * 16) + y
end
function indextomap(index)
   local x = (index-1)/16
   local y = index - (x*w)
   return {x,y}
end

-- pop the first element off a table (unused
function pop(t)
   local top = t[1]
   for i=1,(#t) do
	  if i == (#t) then
		 del(t,t[i])
	  else
		 t[i] = t[i+1]
	  end
   end
   return top
end






__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011666666661100000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1dd6110000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1ddd611000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1dddd61100000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1ddddd6110000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd6dddddd611000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddd6ddd6ddddd61100000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011dddddddddddddd6110000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011dd6dd6dd6dddddd611000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011dddddddddddddddd61100000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddd6ddd6ddddddddd6110000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd6dddddddddddd611000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1ddddddddddddd61100000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1dddddddddddddd6110000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1ddddddddddddddd611000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1dddddddddddddddd61100000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000111111222222222222222ddd6110000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000111127777777777777772ddd110000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000001ffff27777777777777772ddd110000000000000000000000000000000000000000000000000000000000000000000000
0000000000077000000000000007711f888827777777777777772ddd110000000000000000000000000000000000000000000000000000000000000000000000
000000000077700000000000007991f8888827777777777777772dd2222222222222222222000000000000000000000000000000000000000000000000000000
000000000777700000000000079991f8888827777777777777772d27777777777777777777200000000000000000000000000000000000000000000000000000
000000007777700000000000799991f8888827777777777777772d27777777777777777777721111111111111111111111111111111111111000000000000000
000000007777700000000000799991f8888827777777777777772227777777777777777777772111111111111111111111111111111111111100000000000000
000000007777700000000000799991f88888277777777777777776777777777777777777777772dddddddddddddddddddddddddddd1666666111000000000000
000000007777700000000000799991f888882777777777777777767777777777777777777777772ddddddddddddddd6666ddddd6661666666611100000000000
000000007777700000000000799991f8888827777777777777777677777777777777777777777726666666666666661111666661116666666666110000000000
000000007777700000000000799991f8888827777777777777777677777777777777777777777721111111111111116666111116666666666666110000000000
000000000777700000000000079991f888882777777777777777227777777777777777777777772f116666666666666666666666666666666666110000000000
000000000077700000000000007991f888882777777777777772dd27777777777777777777777728ff1166666666666666666666666666666666110000000000
0000000000077000000000000007711f88882777777777777772dd2777777777777777777777772888ff17777777777777777777777777777771100000000000
00000000000000000000000000000001ffff2777777777777772dd277777777777777777777777288888f1777777777777777777777777711111000000000000
0000000000000000000000000000000011112777777777777772dd27777777777777777777777721111111111111111111111111111111111110000000000000
0000000000000000000000000000000001662777777777777772dd27777777777777777777777721111111111111111111111111111111100000000000000000
000000000000000000000000000000001ddd2222222777777722dd22777777222222222777777200000000000000000000000000000000000000000000000000
000000000000000000000000000000001dddd62dddd2666662dddddd266662ddddddddd266666222222222222222221100000000000000000000000000000000
000000000000000000000000000000001ddddd622227777777222222777777222222222777777772777777777777772210000000000000000000000000000000
000000000000000000000000000000001ddddd627777777777777777777777777777777777777772777777777777777211000000000000000000000000000000
0000000000000000000000000000000001dddd6277777777777777777777777777777777777777727777777777777772f1100000000000000000000000000000
00000000000000000000000000000000001ddd62777777777777777777777777777777777777777277777777777777772f110000000000000000000000000000
000000000000000000000000000000000001dd627777777777777777777777777777777777777772777777777777777728f11000000000000000000000000000
000000000000000000000000000000000000111277777777777777777777777777777777777777722222222777772222288f1100000000000000000000000000
0000000000000000000000000000000000001ff2777777722226666222222222666662222277777772222dd26662dddd2288f110000000000000000000000000
0000000000000000000000000000000000001f827777772222333333222222233333332222277777777722277777222222222111000000000000000000000000
0000000000000000000000000000000000001f8277777722333333333333333333333333322777777777777777777777777772f1100000000000000000000000
000000000000000000000000000000000001f882777777223333333333333333333333333227777777777777777777777777728f100000000000000000000000
000000000000000000000000000000000001f882777777223333333333333333333333333227777777777777777777777777728f100000000000000000000000
000000000000000000000000000000000001f882777777233333333333333333333333333327777777777777777777777777728f100000000000000000000000
000000000000000000000000000000000001f882777777633333333333333333333333333367777777777777777777777777728f100000000000000000000000
000000000000000000000000000000000001f882777777633333333333333333333333333367777777777777777777777777728f100000000000000000000000
000000000000000000000000000000000001f882777777233333333333333333333333333327777777777777777777777777728f100000000000000000000000
000000000000000000000000000000000001f882777777223333333333333333333333333227777777777777777777777777728f100000000000000000000000
000000000000000000000000000000000001f882777777223333333333333333333333333227777777777777777777777777728f100000000000000000000000
0000000000000000000000000000000000001f8277777722333333333333333333333333322777777777777777777777777772f1100000000000000000000000
0000000000000000000000000000000000001f827777772222333333222222233333332222277777777722277777222222222111000000000000000000000000
0000000000000000000000000000000000001ff2777777722226666222222222666662222277777772222dd26662dddd2288f110000000000000000000000000
000000000000000000000000000000000000111277777777777777777777777777777777777777722222222777772222288f1100000000000000000000000000
000000000000000000000000000000000001dd627777777777777777777777777777777777777772777777777777777728f11000000000000000000000000000
00000000000000000000000000000000001ddd62777777777777777777777777777777777777777277777777777777772f110000000000000000000000000000
0000000000000000000000000000000001dddd6277777777777777777777777777777777777777727777777777777772f1100000000000000000000000000000
000000000000000000000000000000001ddddd627777777777777777777777777777777777777772777777777777777211000000000000000000000000000000
000000000000000000000000000000001ddddd622227777777222222777777222222222777777772777777777777772210000000000000000000000000000000
000000000000000000000000000000001dddd62dddd2666662dddddd266662ddddddddd266666222222222222222221100000000000000000000000000000000
000000000000000000000000000000001ddd2222222777777722dd22777777222222222777777200000000000000000000000000000000000000000000000000
0000000000000000000000000000000001662777777777777772dd27777777777777777777777721111111111111111111111111111111100000000000000000
0000000000000000000000000000000011112777777777777772dd27777777777777777777777721111111111111111111111111111111111110000000000000
00000000000000000000000000000001ffff2777777777777772dd277777777777777777777777288888f1777777777777777777777777711111000000000000
0000000000000000000000000007711f88882777777777777772dd2777777777777777777777772888ff17777777777777777777777777777771100000000000
000000000000000000000000007991f888882777777777777772dd27777777777777777777777728ff1166666666666666666666666666666666110000000000
000000000000000000000000079991f888882777777777777777227777777777777777777777772f116666666666666666666666666666666666110000000000
000000000000000000000000799991f8888827777777777777777677777777777777777777777721111111111111116666111116666666666666110000000000
000000000000000000000000799991f8888827777777777777777677777777777777777777777726666666666666661111666661116666666666110000000000
000000000000000000000000799991f888882777777777777777767777777777777777777777772ddddddddddddddd6666ddddd6661666666611100000000000
000000000000000000000000799991f88888277777777777777776777777777777777777777772dddddddddddddddddddddddddddd1666666111000000000000
000000000000000000000000799991f8888827777777777777772227777777777777777777772111111111111111111111111111111111111100000000000000
000000000000000000000000799991f8888827777777777777772d27777777777777777777721111111111111111111111111111111111111000000000000000
000000000000000000000000079991f8888827777777777777772d27777777777777777777200000000000000000000000000000000000000000000000000000
000000000000000000000000007991f8888827777777777777772dd2222222222222222222000000000000000000000000000000000000000000000000000000
0000000000000000000000000007711f888827777777777777772ddd110000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000001ffff27777777777777772ddd110000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000111127777777777777772ddd110000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000111111222222222222222ddd6110000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1dddddddddddddddd61100000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1ddddddddddddddd611000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1dddddddddddddd6110000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1ddddddddddddd61100000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd6dddddddddddd611000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddd6ddd6ddddddddd6110000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011dddddddddddddddd61100000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011dd6dd6dd6dddddd611000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011dddddddddddddd6110000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddd6ddd6ddddd61100000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd6dddddd611000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1ddddd6110000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1dddd61100000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1ddd611000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011ddddd1dd6110000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011666666661100000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000011111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
