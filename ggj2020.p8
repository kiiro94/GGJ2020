pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
--main


printh("---------------------")


--Screen from 0 to 127
--Data   from 1 to 128

function makePoint(x, y, col)
   return {
	  x = x,
	  y = y,
	  s = 1,
	  c = col
   }
end

function destroyPoint(x,y)
   for p in all(data) do
     dist = sqrt((p.x - x)^2 + (p.y - y)^2)
	  if dist < rnd(5)+5 and p.s == 1 then
		 p.s = 0
       createParticle(p.x, p.y, p.c)
	  end
   end
end

function recreateEveryPoint()
   for p in all(data) do	
		p.s = 1
	end
   particles = {}
end

function createParticle(x, y, c)
   add(particles, {x = x, y = y, c = c, sx = rnd(5)+1, sy = rnd(2)-1})
end


function getStruct()
   cls()
   spr(1, 0, 0, 16, 16)
   struct = {}
   for j=0,127 do
	  for i=0,127 do
       pt = pget(i,j)
		 if pt!=0 then
			add(struct, makePoint(i, j, pt))
		 end
	  end
   end
   cls()
   return struct
end

function drawPoint(p)
   if p.s==1 then
	  pset(p.x, p.y, p.c)
   end
end

function drawStruct()
   foreach(data, drawPoint)
end

function drawParticles()
   for p in all(particles) do
      pset(p.x, p.y, p.c)
   end
end

function animateParticles()
   for p in all(particles) do
      p.x -= p.sx
      p.y += p.sy

      if (p.x < 0) then
         del(particles, p)
      end
   end
end


function printData()
   for j=1,32 do
	  s = ""
	  for i=1,128 do
		 s1 = "0"
		 if (data[j][i]==6) s1 = "."
		 s = s .. s1
	  end
	  printh(s)
   end
end

function createStars()
   s = {}
   for i = 0,25 do
      add(s, {x = rnd(127), y = rnd(127), l = flr(rnd(3))})
   end
   return s
end

function drawStars()
   for s in all(stars) do
      pset(s.x, s.y, 7)
   end
end

function animateStars()
   for s in all(stars) do
      if (s.l == 0) then s.x -= 1
      elseif (s.l == 1) then s.x -= 2
      elseif (s.l == 2) then s.x -= 4 end

      if (s.x < 0) then
         s.x = 129
         s.l = flr(rnd(3))
      end
   end
end



--------------------------------




function _init()
    poke(0x5F2D, 1)
	mx = stat(32)
	my = stat(33)
	mb = stat(34)
	data = getStruct()
	t = 0
	pset(127,0,8)

   particles = {}
   stars = createStars()
end


function mouseLeft()
	destroyPoint(mx, my)
end

function mouseRight()
   recreateEveryPoint()
end

function _update()
	mx = stat(32)
	my = stat(33)


	if mb==0 then
		mb = stat(34)
		if mb==1 then
		   mouseLeft()
		elseif mb==2 then
         mouseRight()
      end
	end
	mb = stat(34)

   t += 1

   animateParticles()
   animateStars()
end





function _draw()
   cls()
   drawStars()
   drawStruct()
   drawParticles()
   pset(mx, my, 8)
   if btn(5) then
	  print("Mem :"..stat(0), 0,  0, 8)
	  print("Cpu1:"..stat(1), 0,  8, 8)
	  print("Cpu2:"..stat(2), 0, 16, 8)
	  print("Fps :"..stat(7), 0, 24, 8)
	  print("mx: " .. mx, 0, 32, 8)
	  print("my: " .. my, 0, 40, 8)
	  print("mb: " .. mb, 0, 48, 8)
   end
end




--cose


-->8
--pathfinding




function findPath(start, goal)
   wallCol = 2

   --initialize data with current point
   frontier = {}
   insert(frontier, start, 0)
   came_from = {}
   came_from[vectoindex(start)] = nil
   cost_so_far = {}
   cost_so_far[vectoindex(start)] = 0

   --Cycle until i have frontiers unexplored
   while (#frontier > 0 and #frontier < 1000) do
	  --Take the current frontier tile
	  current = popEnd(frontier)

	  --If I have reach my goal we can break
	  if (vectoindex(current) == vectoindex(goal)) break 

	  --Get cycle through all the neighbours
	  local neighbours = getNeighbours(current)
	  for next in all(neighbours) do
		 local nextIndex = vectoindex(next)
		 local new_cost = cost_so_far[vectoindex(current)] + 1

		 --If I have not explored this tile or if I found a better route to an existing one
		 if (cost_so_far[nextIndex] == nil) or (new_cost < cost_so_far[nextIndex]) then
			--Set this tile as a new frontier and save its cost
			cost_so_far[nextIndex] = new_cost
			local priority = new_cost + heuristic(goal, next)
			insert(frontier, next, priority)
			
			--Save from where I came
			came_from[nextIndex] = current
			
			--if (nextIndex != vectoindex(start)) and (nextIndex != vectoindex(goal)) then
			--   mset(next[1],next[2],19)
			--end
		 end 
	  end
   end

   --Recreate the path from the goal
   current = came_from[vectoindex(goal)]
   path = {}
   local cindex = vectoindex(current)
   local sindex = vectoindex(start)
   while cindex != sindex do
	  add(path, current)
	  current = came_from[cindex]
	  cindex = vectoindex(current)
   end
   reverse(path)

   return path
   --for point in all(path) do
   --	  mset(point[1],point[2],18)
   --end

end









-- manhattan distance on a square grid
function heuristic(a, b)
   return abs(a[1] - b[1]) + abs(a[2] - b[2])
end

-- find all existing neighbours of a position that are not walls
debugCounter = 0
function getNeighbours(pos)
   local neighbours={}
   local x = pos[1]
   local y = pos[2]



   if x>0 and x<128 and y>0 and y<128 then
	  for p in all(data) do
		 if p.c!=2 then
			if     (p.x==x-1 and p.y==y) then add(neighbours, {x-1,y})
		    elseif (p.x==x+1 and p.y==y) then add(neighbours, {x+1,y})
            elseif (p.x==x and p.y==y+1) then add(neighbours, {x,y+1})
            elseif (p.x==x and p.y==y-1) then add(neighbours, {x,y-1})
			end
		 end
	  end
   end
   debugCounter += 1
   printh(pos[1] .. "," .. pos[2] .. " dc:" .. debugCounter)

   -- for making diagonals
   --if (x+y) % 2 == 0 then
   --	  reverse(neighbours)
   --end
   return neighbours
end

-- insert into start of table
function insert(t, val)
   for i=(#t+1),2,-1 do
	  t[i] = t[i-1]
   end
   t[1] = val
end

-- insert into table and sort by priority
function insert(t, val, p)
   if #t >= 1 then
	  add(t, {})
	  for i=(#t),2,-1 do
		 
		 local next = t[i-1]
		 if p < next[2] then
			t[i] = {val, p}
			return
		 else
			t[i] = next
		 end
	  end
	  t[1] = {val, p}
   else
	  add(t, {val, p}) 
   end
end

-- pop the last element off a table
function popEnd(t)
   local top = t[#t]
   del(t,t[#t])
   return top[1]
end

function reverse(t)
   for i=1,(#t/2) do
	  local temp = t[i]
	  local oppindex = #t-(i-1)
	  t[i] = t[oppindex]
	  t[oppindex] = temp
   end
end

-- translate a 2d x,y coordinate to a 1d index and back again
function vectoindex(vec)
   return maptoindex(vec[1],vec[2])
end
function maptoindex(x, y)
   return ((x+1) * 16) + y
end
function indextomap(index)
   local x = (index-1)/16
   local y = index - (x*w)
   return {x,y}
end

-- pop the first element off a table (unused
function pop(t)
   local top = t[1]
   for i=1,(#t) do
	  if i == (#t) then
		 del(t,t[i])
	  else
		 t[i] = t[i+1]
	  end
   end
   return top
end






__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000055000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666500000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666500000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666650000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666665000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666666500000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666666500000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666666650000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666665000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666500000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666650000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666665000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666665000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666666500000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666666650000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666666665000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666666666500000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666666666650000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666666666650000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000055666666666666666666666665000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000505ff555552222222222222226666500000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000005455ffffff27777777777777772666500000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000054445ffffff27777777777777772666650000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000544445ffffff27777777777777772666665000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000544445ffffff27777777777777772562222222222222222222000000000000000000000000000000000000000000000000000000
00000000000000000000000054444555555527777777777777772527777777777777777777200000000000000000000000000000000000000000000000000000
00000000000000000000000059944577777727777777777777772727777777777777777777720000000000000000000000000000000000000000000000000000
00000000000000000000000054444577777727777777777777772727777777777777777777772555555555555555555555555555555555555000000000000000
000000000000000000000000544445777777277777777777777772777777777777777777777772ffffffffffffffffffffffffffff5666666500000000000000
0000000000000000000000005444457777772777777777777777767777777777777777777777772fffffffffffffffffffffffffff5666666655000000000000
0000000000000000000000005444457777772777777777777777767777777777777777777777772fffffffffffffff5555fffff5556666666666500000000000
00000000000000000000000054444577777727777777777777777677777777777777777777777725555555555555556666555556666666666666500000000000
00000000000000000000000005444577777727777777777777772277777777777777777777777727566666666666666666666666666666666666500000000000
00000000000000000000000000544577777727777777777777725527777777777777777777777727775566666666666666666666666666666666500000000000
00000000000000000000000000055557777727777777777777725527777777777777777777777727777756666666666666666666666666666665000000000000
00000000000000000000000000000005777727777777777777725527777777777777777777777727777775666666666666666666666666655550000000000000
00000000000000000000000000000000555527777777777777725527777777777777777777777725555555555555555555555555555555500000000000000000
00000000000000000000000000000000056627777777777777725527777777777777777777777726666666650000000000000000000000000000000000000000
00000000000000000000000000000000566622222227777777225522777777222222222777777266555555500000000000000000000000000000000000000000
00000000000000000000000000000000566666255552666662555555266662555555555266666225222222222222220000000000000000000000000000000000
00000000000000000000000000000000566666622227777777222222777777222222222777777772777777777777772200000000000000000000000000000000
00000000000000000000000000000000566666627777777777777777777777777777777777777772777777777777777250000000000000000000000000000000
000000000000000000000000000000000566666277777777777777777777777777777777777777727777777777777772f5000000000000000000000000000000
0000000000000000000000000000000000566662777777777777777777777777777777777777777277777777777777772f500000000000000000000000000000
0000000000000000000000000000000000056662777777777777777777777777777777777777777277777777777777772ff50000000000000000000000000000
0000000000000000000000000000000000005552777777777777777777777777777777777777777222222227777722222fff5000000000000000000000000000
0000000000000000000000000000000000005ff27777777222266662222222226666622222777777722225526662555522fff500000000000000000000000000
0000000000000000000000000000000000005ff27777772222777777222222277777772222277777777722277777222222222550000000000000000000000000
0000000000000000000000000000000000005ff27777772277777777777777777777777772277777777777777777777777777265000000000000000000000000
000000000000000000000000000000000005fff27777772277777777777777777777777772277777777777777777777777777266500000000000000000000000
000000000000000000000000000000000005fff27777772277777777777777777777777772277777777777777777777777777266500000000000000000000000
000000000000000000000000000000000005fff27777772777777777777777777777777777277777777777777777777777777266500000000000000000000000
000000000000000000000000000000000005fff27777776777777777777777777777777777677777777777777777777777777266500000000000000000000000
000000000000000000000000000000000005fff27777776777777777777777777777777777677777777777777777777777777266500000000000000000000000
000000000000000000000000000000000005fff27777772777777777777777777777777777277777777777777777777777777266500000000000000000000000
000000000000000000000000000000000005fff27777772277777777777777777777777772277777777777777777777777777266500000000000000000000000
000000000000000000000000000000000005fff27777772277777777777777777777777772277777777777777777777777777266500000000000000000000000
0000000000000000000000000000000000005ff27777772277777777777777777777777772277777777777777777777777777265000000000000000000000000
0000000000000000000000000000000000005ff27777772222777777222222277777772222277777777722277777222222222550000000000000000000000000
0000000000000000000000000000000000005ff27777777222266662222222226666622222777777722225526662555522fff500000000000000000000000000
0000000000000000000000000000000000005552777777777777777777777777777777777777777222222227777722222fff5000000000000000000000000000
0000000000000000000000000000000000056662777777777777777777777777777777777777777277777777777777772ff50000000000000000000000000000
0000000000000000000000000000000000566662777777777777777777777777777777777777777277777777777777772f500000000000000000000000000000
000000000000000000000000000000000566666277777777777777777777777777777777777777727777777777777772f5000000000000000000000000000000
00000000000000000000000000000000566666627777777777777777777777777777777777777772777777777777777250000000000000000000000000000000
00000000000000000000000000000000566666622227777777222222777777222222222777777772777777777777772200000000000000000000000000000000
00000000000000000000000000000000566666255552666662555555266662555555555266666225222222222222220000000000000000000000000000000000
00000000000000000000000000000000566622222227777777225522777777222222222777777266555555500000000000000000000000000000000000000000
00000000000000000000000000000000056627777777777777725527777777777777777777777726666666650000000000000000000000000000000000000000
00000000000000000000000000000000555527777777777777725527777777777777777777777725555555555555555555555555555555500000000000000000
00000000000000000000000000000005777727777777777777725527777777777777777777777727777775666666666666666666666666655550000000000000
00000000000000000000000000055557777727777777777777725527777777777777777777777727777756666666666666666666666666666665000000000000
00000000000000000000000000544577777727777777777777725527777777777777777777777727775566666666666666666666666666666666500000000000
00000000000000000000000005444577777727777777777777772277777777777777777777777727566666666666666666666666666666666666500000000000
00000000000000000000000059944577777727777777777777777677777777777777777777777725555555555555556666555556666666666666500000000000
0000000000000000000000005444457777772777777777777777767777777777777777777777772fffffffffffffff5555fffff5556666666666500000000000
0000000000000000000000005444457777772777777777777777767777777777777777777777772fffffffffffffffffffffffffff5666666655000000000000
000000000000000000000000544445777777277777777777777772777777777777777777777772ffffffffffffffffffffffffffff5666666500000000000000
00000000000000000000000054444577777727777777777777772727777777777777777777772555555555555555555555555555555555555000000000000000
00000000000000000000000054444577777727777777777777772727777777777777777777720000000000000000000000000000000000000000000000000000
00000000000000000000000054444555555527777777777777772527777777777777777777200000000000000000000000000000000000000000000000000000
000000000000000000000000544445ffffff27777777777777772f52222222222222222222000000000000000000000000000000000000000000000000000000
000000000000000000000000599445ffffff27777777777777772666665000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000054445ffffff27777777777777772666650000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000005455ffffff27777777777777772666500000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000505ff555552222222222222226666500000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000055666666666666666666666665000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666666666650000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666666666650000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666666666500000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666666665000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666666650000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666666500000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666665000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666665000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666650000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666666500000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000005666666666666665000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666666650000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666666500000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666666500000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666665000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666650000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666500000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666666500000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056666666665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000056555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000055000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
